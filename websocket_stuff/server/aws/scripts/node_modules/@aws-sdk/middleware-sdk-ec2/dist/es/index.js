import { __assign, __awaiter, __generator } from "tslib";
import { HttpRequest } from "@aws-sdk/protocol-http";
import { SignatureV4 } from "@aws-sdk/signature-v4";
import { formatUrl } from "@aws-sdk/util-format-url";
import { escapeUri } from "@aws-sdk/util-uri-escape";
var version = "2016-11-15";
//an initialize middleware to add PresignUrl to input
export function copySnapshotPresignedUrlMiddleware(options) {
    var _this = this;
    return function (next) { return function (args) { return __awaiter(_this, void 0, void 0, function () {
        var input, region, resolvedEndpoint, request, signer, presignedRequest;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    input = args.input;
                    if (!!input.PresignedUrl) return [3 /*break*/, 4];
                    return [4 /*yield*/, options.region()];
                case 1:
                    region = _a.sent();
                    return [4 /*yield*/, options.endpoint()];
                case 2:
                    resolvedEndpoint = _a.sent();
                    resolvedEndpoint.hostname = "ec2." + input.SourceRegion + ".amazonaws.com";
                    request = new HttpRequest(__assign(__assign({}, resolvedEndpoint), { protocol: "https", headers: {
                            host: resolvedEndpoint.hostname,
                        }, query: {
                            Action: "CopySnapshot",
                            Version: version,
                            SourceRegion: input.SourceRegion,
                            SourceSnapshotId: input.SourceSnapshotId,
                            DestinationRegion: region,
                        } }));
                    signer = new SignatureV4({
                        credentials: options.credentials,
                        region: input.SourceRegion,
                        service: "ec2",
                        sha256: options.sha256,
                        uriEscapePath: options.signingEscapePath,
                    });
                    return [4 /*yield*/, signer.presign(request, {
                            expiresIn: 3600,
                        })];
                case 3:
                    presignedRequest = _a.sent();
                    args = __assign(__assign({}, args), { input: __assign(__assign({}, args.input), { DestinationRegion: region, PresignedUrl: escapeUri(formatUrl(presignedRequest)) }) });
                    _a.label = 4;
                case 4: return [2 /*return*/, next(args)];
            }
        });
    }); }; };
}
export var copySnapshotPresignedUrlMiddlewareOptions = {
    step: "initialize",
    tags: ["CROSS_REGION_PRESIGNED_URL"],
    name: "crossRegionPresignedUrlMiddleware",
    override: true,
};
export var getCopySnapshotPresignedUrlPlugin = function (config) { return ({
    applyToStack: function (clientStack) {
        clientStack.add(copySnapshotPresignedUrlMiddleware(config), copySnapshotPresignedUrlMiddlewareOptions);
    },
}); };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFjcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQVVyRCxJQUFNLE9BQU8sR0FBRyxZQUFZLENBQUM7QUFFN0IscURBQXFEO0FBQ3JELE1BQU0sVUFBVSxrQ0FBa0MsQ0FBQyxPQUEyQjtJQUE5RSxpQkFnREM7SUEvQ0MsT0FBTyxVQUNMLElBQW9DLElBQ0QsT0FBQSxVQUNuQyxJQUFxQzs7Ozs7b0JBRTdCLEtBQUssR0FBSyxJQUFJLE1BQVQsQ0FBVTt5QkFDbkIsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFuQix3QkFBbUI7b0JBQ04scUJBQU0sT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFBOztvQkFBL0IsTUFBTSxHQUFHLFNBQXNCO29CQUNaLHFCQUFNLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBQTs7b0JBQTNDLGdCQUFnQixHQUFHLFNBQXdCO29CQUNqRCxnQkFBZ0IsQ0FBQyxRQUFRLEdBQUcsU0FBTyxLQUFLLENBQUMsWUFBWSxtQkFBZ0IsQ0FBQztvQkFDaEUsT0FBTyxHQUFHLElBQUksV0FBVyx1QkFDMUIsZ0JBQWdCLEtBQ25CLFFBQVEsRUFBRSxPQUFPLEVBQ2pCLE9BQU8sRUFBRTs0QkFDUCxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsUUFBUTt5QkFDaEMsRUFDRCxLQUFLLEVBQUU7NEJBQ0wsTUFBTSxFQUFFLGNBQWM7NEJBQ3RCLE9BQU8sRUFBRSxPQUFPOzRCQUNoQixZQUFZLEVBQUUsS0FBSyxDQUFDLFlBQVk7NEJBQ2hDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0I7NEJBQ3hDLGlCQUFpQixFQUFFLE1BQU07eUJBQzFCLElBQ0QsQ0FBQztvQkFDRyxNQUFNLEdBQUcsSUFBSSxXQUFXLENBQUM7d0JBQzdCLFdBQVcsRUFBRSxPQUFPLENBQUMsV0FBVzt3QkFDaEMsTUFBTSxFQUFFLEtBQUssQ0FBQyxZQUFZO3dCQUMxQixPQUFPLEVBQUUsS0FBSzt3QkFDZCxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07d0JBQ3RCLGFBQWEsRUFBRSxPQUFPLENBQUMsaUJBQWlCO3FCQUN6QyxDQUFDLENBQUM7b0JBQ3NCLHFCQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFOzRCQUNyRCxTQUFTLEVBQUUsSUFBSTt5QkFDaEIsQ0FBQyxFQUFBOztvQkFGSSxnQkFBZ0IsR0FBRyxTQUV2QjtvQkFFRixJQUFJLHlCQUNDLElBQUksS0FDUCxLQUFLLHdCQUNBLElBQUksQ0FBQyxLQUFLLEtBQ2IsaUJBQWlCLEVBQUUsTUFBTSxFQUN6QixZQUFZLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BRXZELENBQUM7O3dCQUdKLHNCQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQzs7O1NBQ25CLEVBNUNvQyxDQTRDcEMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSx5Q0FBeUMsR0FBNkI7SUFDakYsSUFBSSxFQUFFLFlBQVk7SUFDbEIsSUFBSSxFQUFFLENBQUMsNEJBQTRCLENBQUM7SUFDcEMsSUFBSSxFQUFFLG1DQUFtQztJQUN6QyxRQUFRLEVBQUUsSUFBSTtDQUNmLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxpQ0FBaUMsR0FBRyxVQUFDLE1BQTBCLElBQTBCLE9BQUEsQ0FBQztJQUNyRyxZQUFZLEVBQUUsVUFBQyxXQUFXO1FBQ3hCLFdBQVcsQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsTUFBTSxDQUFDLEVBQUUseUNBQXlDLENBQUMsQ0FBQztJQUN6RyxDQUFDO0NBQ0YsQ0FBQyxFQUpvRyxDQUlwRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGF3cy1zZGsvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHsgU2lnbmF0dXJlVjQgfSBmcm9tIFwiQGF3cy1zZGsvc2lnbmF0dXJlLXY0XCI7XG5pbXBvcnQge1xuICBDcmVkZW50aWFscyxcbiAgRW5kcG9pbnQsXG4gIEhhc2hDb25zdHJ1Y3RvcixcbiAgSW5pdGlhbGl6ZUhhbmRsZXIsXG4gIEluaXRpYWxpemVIYW5kbGVyQXJndW1lbnRzLFxuICBJbml0aWFsaXplSGFuZGxlck9wdGlvbnMsXG4gIEluaXRpYWxpemVIYW5kbGVyT3V0cHV0LFxuICBJbml0aWFsaXplTWlkZGxld2FyZSxcbiAgTWV0YWRhdGFCZWFyZXIsXG4gIFBsdWdnYWJsZSxcbiAgUHJvdmlkZXIsXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgZm9ybWF0VXJsIH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtZm9ybWF0LXVybFwiO1xuaW1wb3J0IHsgZXNjYXBlVXJpIH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtdXJpLWVzY2FwZVwiO1xuXG5pbnRlcmZhY2UgUHJldmlvdXNseVJlc29sdmVkIHtcbiAgY3JlZGVudGlhbHM6IFByb3ZpZGVyPENyZWRlbnRpYWxzPjtcbiAgZW5kcG9pbnQ6IFByb3ZpZGVyPEVuZHBvaW50PjtcbiAgcmVnaW9uOiBQcm92aWRlcjxzdHJpbmc+O1xuICBzaGEyNTY6IEhhc2hDb25zdHJ1Y3RvcjtcbiAgc2lnbmluZ0VzY2FwZVBhdGg6IGJvb2xlYW47XG59XG5cbmNvbnN0IHZlcnNpb24gPSBcIjIwMTYtMTEtMTVcIjtcblxuLy9hbiBpbml0aWFsaXplIG1pZGRsZXdhcmUgdG8gYWRkIFByZXNpZ25VcmwgdG8gaW5wdXRcbmV4cG9ydCBmdW5jdGlvbiBjb3B5U25hcHNob3RQcmVzaWduZWRVcmxNaWRkbGV3YXJlKG9wdGlvbnM6IFByZXZpb3VzbHlSZXNvbHZlZCk6IEluaXRpYWxpemVNaWRkbGV3YXJlPGFueSwgYW55PiB7XG4gIHJldHVybiA8T3V0cHV0IGV4dGVuZHMgTWV0YWRhdGFCZWFyZXI+KFxuICAgIG5leHQ6IEluaXRpYWxpemVIYW5kbGVyPGFueSwgT3V0cHV0PlxuICApOiBJbml0aWFsaXplSGFuZGxlcjxhbnksIE91dHB1dD4gPT4gYXN5bmMgKFxuICAgIGFyZ3M6IEluaXRpYWxpemVIYW5kbGVyQXJndW1lbnRzPGFueT5cbiAgKTogUHJvbWlzZTxJbml0aWFsaXplSGFuZGxlck91dHB1dDxPdXRwdXQ+PiA9PiB7XG4gICAgY29uc3QgeyBpbnB1dCB9ID0gYXJncztcbiAgICBpZiAoIWlucHV0LlByZXNpZ25lZFVybCkge1xuICAgICAgY29uc3QgcmVnaW9uID0gYXdhaXQgb3B0aW9ucy5yZWdpb24oKTtcbiAgICAgIGNvbnN0IHJlc29sdmVkRW5kcG9pbnQgPSBhd2FpdCBvcHRpb25zLmVuZHBvaW50KCk7XG4gICAgICByZXNvbHZlZEVuZHBvaW50Lmhvc3RuYW1lID0gYGVjMi4ke2lucHV0LlNvdXJjZVJlZ2lvbn0uYW1hem9uYXdzLmNvbWA7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IEh0dHBSZXF1ZXN0KHtcbiAgICAgICAgLi4ucmVzb2x2ZWRFbmRwb2ludCxcbiAgICAgICAgcHJvdG9jb2w6IFwiaHR0cHNcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIGhvc3Q6IHJlc29sdmVkRW5kcG9pbnQuaG9zdG5hbWUsXG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgQWN0aW9uOiBcIkNvcHlTbmFwc2hvdFwiLFxuICAgICAgICAgIFZlcnNpb246IHZlcnNpb24sXG4gICAgICAgICAgU291cmNlUmVnaW9uOiBpbnB1dC5Tb3VyY2VSZWdpb24sXG4gICAgICAgICAgU291cmNlU25hcHNob3RJZDogaW5wdXQuU291cmNlU25hcHNob3RJZCxcbiAgICAgICAgICBEZXN0aW5hdGlvblJlZ2lvbjogcmVnaW9uLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBjb25zdCBzaWduZXIgPSBuZXcgU2lnbmF0dXJlVjQoe1xuICAgICAgICBjcmVkZW50aWFsczogb3B0aW9ucy5jcmVkZW50aWFscyxcbiAgICAgICAgcmVnaW9uOiBpbnB1dC5Tb3VyY2VSZWdpb24sXG4gICAgICAgIHNlcnZpY2U6IFwiZWMyXCIsXG4gICAgICAgIHNoYTI1Njogb3B0aW9ucy5zaGEyNTYsXG4gICAgICAgIHVyaUVzY2FwZVBhdGg6IG9wdGlvbnMuc2lnbmluZ0VzY2FwZVBhdGgsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHByZXNpZ25lZFJlcXVlc3QgPSBhd2FpdCBzaWduZXIucHJlc2lnbihyZXF1ZXN0LCB7XG4gICAgICAgIGV4cGlyZXNJbjogMzYwMCxcbiAgICAgIH0pO1xuXG4gICAgICBhcmdzID0ge1xuICAgICAgICAuLi5hcmdzLFxuICAgICAgICBpbnB1dDoge1xuICAgICAgICAgIC4uLmFyZ3MuaW5wdXQsXG4gICAgICAgICAgRGVzdGluYXRpb25SZWdpb246IHJlZ2lvbixcbiAgICAgICAgICBQcmVzaWduZWRVcmw6IGVzY2FwZVVyaShmb3JtYXRVcmwocHJlc2lnbmVkUmVxdWVzdCkpLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dChhcmdzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGNvcHlTbmFwc2hvdFByZXNpZ25lZFVybE1pZGRsZXdhcmVPcHRpb25zOiBJbml0aWFsaXplSGFuZGxlck9wdGlvbnMgPSB7XG4gIHN0ZXA6IFwiaW5pdGlhbGl6ZVwiLFxuICB0YWdzOiBbXCJDUk9TU19SRUdJT05fUFJFU0lHTkVEX1VSTFwiXSxcbiAgbmFtZTogXCJjcm9zc1JlZ2lvblByZXNpZ25lZFVybE1pZGRsZXdhcmVcIixcbiAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29weVNuYXBzaG90UHJlc2lnbmVkVXJsUGx1Z2luID0gKGNvbmZpZzogUHJldmlvdXNseVJlc29sdmVkKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZChjb3B5U25hcHNob3RQcmVzaWduZWRVcmxNaWRkbGV3YXJlKGNvbmZpZyksIGNvcHlTbmFwc2hvdFByZXNpZ25lZFVybE1pZGRsZXdhcmVPcHRpb25zKTtcbiAgfSxcbn0pO1xuIl19