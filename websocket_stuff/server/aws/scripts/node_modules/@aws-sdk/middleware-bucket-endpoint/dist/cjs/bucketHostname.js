"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bucketHostname = void 0;
const bucketHostnameUtils_1 = require("./bucketHostnameUtils");
const bucketHostname = (options) => {
    const { isCustomEndpoint, baseHostname, dualstackEndpoint, accelerateEndpoint } = options;
    if (isCustomEndpoint) {
        if (dualstackEndpoint)
            throw new Error("Dualstack endpoint is not supported with custom endpoint");
        if (accelerateEndpoint)
            throw new Error("Accelerate endpoint is not supported with custom endpoint");
    }
    return bucketHostnameUtils_1.isBucketNameOptions(options)
        ? // Construct endpoint when bucketName is a string referring to a bucket name
            getEndpointFromBucketName({ ...options, isCustomEndpoint })
        : // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point
            getEndpointFromArn({ ...options, isCustomEndpoint });
};
exports.bucketHostname = bucketHostname;
const getEndpointFromArn = (options) => {
    const { isCustomEndpoint, baseHostname } = options;
    const [clientRegion, hostnameSuffix] = isCustomEndpoint
        ? [options.clientRegion, baseHostname]
        : // Infer client region and hostname suffix from hostname from endpoints.json, like `s3.us-west-2.amazonaws.com`
            bucketHostnameUtils_1.getSuffixForArnEndpoint(baseHostname);
    const { pathStyleEndpoint, dualstackEndpoint = false, accelerateEndpoint = false, tlsCompatible = true, useArnRegion, bucketName, clientPartition = "aws", clientSigningRegion = clientRegion, } = options;
    bucketHostnameUtils_1.validateArnEndpointOptions({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });
    // Validate and parse the ARN supplied as a bucket name
    const { service, partition, accountId, region, resource } = bucketName;
    bucketHostnameUtils_1.validateService(service);
    bucketHostnameUtils_1.validatePartition(partition, { clientPartition });
    bucketHostnameUtils_1.validateAccountId(accountId);
    bucketHostnameUtils_1.validateRegion(region, { useArnRegion, clientRegion, clientSigningRegion });
    const { accesspointName, outpostId } = bucketHostnameUtils_1.getArnResources(resource);
    const DNSHostLabel = `${accesspointName}-${accountId}`;
    bucketHostnameUtils_1.validateDNSHostLabel(DNSHostLabel, { tlsCompatible });
    const endpointRegion = useArnRegion ? region : clientRegion;
    const signingRegion = useArnRegion ? region : clientSigningRegion;
    if (service === "s3-object-lambda") {
        bucketHostnameUtils_1.validateNoDualstack(dualstackEndpoint);
        return {
            bucketEndpoint: true,
            hostname: `${DNSHostLabel}.${service}.${endpointRegion}.${hostnameSuffix}`,
            signingRegion,
            signingService: service,
        };
    }
    else if (outpostId) {
        // if this is an Outpost ARN
        bucketHostnameUtils_1.validateOutpostService(service);
        bucketHostnameUtils_1.validateDNSHostLabel(outpostId, { tlsCompatible });
        bucketHostnameUtils_1.validateNoDualstack(dualstackEndpoint);
        bucketHostnameUtils_1.validateNoFIPS(endpointRegion);
        const hostnamePrefix = `${DNSHostLabel}.${outpostId}`;
        return {
            bucketEndpoint: true,
            hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,
            signingRegion,
            signingService: "s3-outposts",
        };
    }
    // construct endpoint from Accesspoint ARN
    bucketHostnameUtils_1.validateS3Service(service);
    const hostnamePrefix = `${DNSHostLabel}`;
    return {
        bucketEndpoint: true,
        hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-accesspoint${dualstackEndpoint ? ".dualstack" : ""}.${endpointRegion}`}.${hostnameSuffix}`,
        signingRegion,
    };
};
const getEndpointFromBucketName = ({ accelerateEndpoint = false, clientRegion: region, baseHostname, bucketName, dualstackEndpoint = false, pathStyleEndpoint = false, tlsCompatible = true, isCustomEndpoint = false, }) => {
    const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : bucketHostnameUtils_1.getSuffix(baseHostname);
    if (pathStyleEndpoint || !bucketHostnameUtils_1.isDnsCompatibleBucketName(bucketName) || (tlsCompatible && bucketHostnameUtils_1.DOT_PATTERN.test(bucketName))) {
        return {
            bucketEndpoint: false,
            hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname,
        };
    }
    if (accelerateEndpoint) {
        baseHostname = `s3-accelerate${dualstackEndpoint ? ".dualstack" : ""}.${hostnameSuffix}`;
    }
    else if (dualstackEndpoint) {
        baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;
    }
    return {
        bucketEndpoint: true,
        hostname: `${bucketName}.${baseHostname}`,
    };
};
//# sourceMappingURL=data:application/json;base64,