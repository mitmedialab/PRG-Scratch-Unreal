import { EC2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../EC2Client";
import { CancelSpotFleetRequestsRequest, CancelSpotFleetRequestsResponse } from "../models/models_0";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export interface CancelSpotFleetRequestsCommandInput extends CancelSpotFleetRequestsRequest {
}
export interface CancelSpotFleetRequestsCommandOutput extends CancelSpotFleetRequestsResponse, __MetadataBearer {
}
/**
 * <p>Cancels the specified Spot Fleet requests.</p>
 *          <p>After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances.
 *        You must specify whether the Spot Fleet should also terminate its Spot Instances.
 *        If you terminate the instances, the Spot Fleet request enters the <code>cancelled_terminating</code> state.
 *        Otherwise, the Spot Fleet request enters the <code>cancelled_running</code> state and the instances
 *        continue to run until they are interrupted or you terminate them manually.</p>
 */
export declare class CancelSpotFleetRequestsCommand extends $Command<CancelSpotFleetRequestsCommandInput, CancelSpotFleetRequestsCommandOutput, EC2ClientResolvedConfig> {
    readonly input: CancelSpotFleetRequestsCommandInput;
    constructor(input: CancelSpotFleetRequestsCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EC2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelSpotFleetRequestsCommandInput, CancelSpotFleetRequestsCommandOutput>;
    private serialize;
    private deserialize;
}
