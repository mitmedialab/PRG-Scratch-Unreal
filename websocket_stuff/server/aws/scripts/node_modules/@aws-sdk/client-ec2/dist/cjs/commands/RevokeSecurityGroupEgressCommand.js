"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RevokeSecurityGroupEgressCommand = void 0;
const models_5_1 = require("../models/models_5");
const Aws_ec2_1 = require("../protocols/Aws_ec2");
const middleware_serde_1 = require("@aws-sdk/middleware-serde");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * <p>[VPC only] Removes the specified egress rules from a security group for EC2-VPC.
 *        This action does not apply to security groups for use in EC2-Classic. To remove a rule, the
 *        values that you specify (for example, ports) must match the existing rule's values
 *        exactly.</p>
 *          <note>
 *             <p>[Default VPC] If the values you specify do not match the existing rule's values, no error is
 *                 returned, and the output describes the security group rules that were not revoked. </p>
 *             <p>AWS recommends that you use <a>DescribeSecurityGroups</a> to verify
 *                 that the rule has been removed.</p>
 *          </note>
 *          <p>Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or source security
 *       group. For the TCP and UDP protocols, you must also specify the destination port or range of
 *       ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule
 *       has a description, you do not have to specify the description to revoke the rule.</p>
 *          <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
 */
class RevokeSecurityGroupEgressCommand extends smithy_client_1.Command {
    // Start section: command_properties
    // End section: command_properties
    constructor(input) {
        // Start section: command_constructor
        super();
        this.input = input;
        // End section: command_constructor
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use(middleware_serde_1.getSerdePlugin(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "EC2Client";
        const commandName = "RevokeSecurityGroupEgressCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: models_5_1.RevokeSecurityGroupEgressRequest.filterSensitiveLog,
            outputFilterSensitiveLog: models_5_1.RevokeSecurityGroupEgressResult.filterSensitiveLog,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return Aws_ec2_1.serializeAws_ec2RevokeSecurityGroupEgressCommand(input, context);
    }
    deserialize(output, context) {
        return Aws_ec2_1.deserializeAws_ec2RevokeSecurityGroupEgressCommand(output, context);
    }
}
exports.RevokeSecurityGroupEgressCommand = RevokeSecurityGroupEgressCommand;
//# sourceMappingURL=RevokeSecurityGroupEgressCommand.js.map