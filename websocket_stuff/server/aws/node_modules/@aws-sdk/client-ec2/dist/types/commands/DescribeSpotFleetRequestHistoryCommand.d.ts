import { EC2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../EC2Client";
import { DescribeSpotFleetRequestHistoryRequest, DescribeSpotFleetRequestHistoryResponse } from "../models/models_3";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export interface DescribeSpotFleetRequestHistoryCommandInput extends DescribeSpotFleetRequestHistoryRequest {
}
export interface DescribeSpotFleetRequestHistoryCommandOutput extends DescribeSpotFleetRequestHistoryResponse, __MetadataBearer {
}
/**
 * <p>Describes the events for the specified Spot Fleet request during the specified time.</p>
 *          <p>Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query
 *           by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours.</p>
 */
export declare class DescribeSpotFleetRequestHistoryCommand extends $Command<DescribeSpotFleetRequestHistoryCommandInput, DescribeSpotFleetRequestHistoryCommandOutput, EC2ClientResolvedConfig> {
    readonly input: DescribeSpotFleetRequestHistoryCommandInput;
    constructor(input: DescribeSpotFleetRequestHistoryCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EC2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSpotFleetRequestHistoryCommandInput, DescribeSpotFleetRequestHistoryCommandOutput>;
    private serialize;
    private deserialize;
}
